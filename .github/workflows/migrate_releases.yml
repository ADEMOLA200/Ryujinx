name: Migrate Releases

on:
  workflow_dispatch:

jobs:
  migrate-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Debug Secrets
        run: |
          if [[ -z "${{ secrets.RELEASE_TOKEN }}" ]]; then
            echo "‚ùå RELEASE_TOKEN is missing!"
            exit 1
          else
            echo "‚úÖ RELEASE_TOKEN is set."
          fi

      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.RELEASE_TOKEN }}" | gh auth login --with-token

      - name: Check GitHub API Rate Limits
        run: gh api rate_limit

      - name: Delete Existing Releases
        run: |
          set -e
          DEST_REPO="ADEMOLA200/RyuNX"
          echo "üö® Deleting all existing releases in $DEST_REPO..."

          EXISTING_TAGS=$(gh api --paginate "/repos/$DEST_REPO/releases" --jq '.[].tag_name')

          if [ -z "$EXISTING_TAGS" ]; then
              echo "‚úÖ No existing releases found."
          else
              for TAG in $EXISTING_TAGS; do
                  echo "üóëÔ∏è Deleting release: $TAG"
                  gh release delete "$TAG" -R "$DEST_REPO" --yes || echo "‚ö†Ô∏è Failed to delete $TAG"
              done
              echo "‚úÖ All releases deleted!"
          fi

      - name: Fetch and Migrate Releases
        run: |
          set -e
          SOURCE_REPO="Ryubing/Canary-Releases"
          DEST_REPO="ADEMOLA200/RyuNX"

          SOURCE_TAGS=$(gh api --paginate "/repos/$SOURCE_REPO/releases" --jq '.[].tag_name')

          if [ -z "$SOURCE_TAGS" ]; then
              echo "‚ùå No releases found in source repository!"
              exit 1
          fi

          echo "Found releases to migrate:"
          echo "$SOURCE_TAGS"

          for TAG in $SOURCE_TAGS; do
              echo "üöÄ Processing release: $TAG"
              
              ASSET_URLS=$(gh release view "$TAG" -R "$SOURCE_REPO" --json assets -q '.assets[].url')

              DESCRIPTION="## Canary builds:

              These builds are experimental and may sometimes not work, use [regular builds](https://github.com/Ryujinx/release-channel-master/releases) instead if that sounds like something you don't want to deal with.

              | Platform           | Artifact                     |
              |--------------------|------------------------------|
              | Windows 64-bit     | Canary Windows Artifact      |
              | Windows ARM 64-bit | Canary Windows ARM Artifact  |
              | Linux 64-bit       | Canary Linux Artifact        |
              | Linux ARM 64-bit   | Canary Linux ARM Artifact    |
              | macOS              | Canary macOS Artifact        |"

              DESCRIPTION_CLEANED=$(echo "$DESCRIPTION" | sed 's/^              //g')

              gh release create "$TAG" -R "$DEST_REPO" \
                --title "$TAG" \
                --notes "$DESCRIPTION_CLEANED"

              for URL in $ASSET_URLS; do
                  FILENAME=$(basename "$URL")
                  echo "üì• Downloading $FILENAME..."
                  curl -L -o "$FILENAME" "$URL"
                  echo "üì§ Uploading $FILENAME..."
                  gh release upload "$TAG" -R "$DEST_REPO" "$FILENAME" || echo "‚ö†Ô∏è Failed to upload $FILENAME"
                  rm -f "$FILENAME"
              done

              echo "‚úÖ Successfully migrated release $TAG!"
              sleep 1
          done
